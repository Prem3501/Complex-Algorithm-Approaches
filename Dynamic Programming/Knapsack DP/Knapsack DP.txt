Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, two integer arrays val[0..n-1] and wt[0..n-1] represent values and weights associated with n items respectively.

Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[ ] such that the sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item or donâ€™t pick it.

Solve this problem using Dynamic programming.

Input format :
The first line of input represents the number of items.

The second line consists of the values of each item separated by space.

The third line consists of the weights of each item separated by space.

The fourth line consists of an Integer representing the knapsack's maximum capacity.

Output format :
Output prints the maximum value of items that can be held by the knapsack.

Sample test cases :
Input 1 :
3
60 100 120
10 20 30
50
Output 1 :
220
Input 2 :
5
20 50 60 30 10
1 2 3 4 5
8
Output 2 :
130
